name: Multi-Platform Build (Optimized)

on:
  push:
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      build_android:
        description: 'Build Android'
        required: false
        default: true
        type: boolean
      build_ios:
        description: 'Build iOS'
        required: false
        default: true
        type: boolean
      build_macos:
        description: 'Build macOS'
        required: false
        default: true
        type: boolean
      build_windows:
        description: 'Build Windows'
        required: false
        default: true
        type: boolean
      build_linux:
        description: 'Build Linux'
        required: false
        default: true
        type: boolean

jobs:
  build_android_and_tv:
    if: github.event.inputs.build_android != 'false' || github.event.inputs.build_android == '' || github.event_name != 'workflow_dispatch'
    runs-on: macos-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.8'
          cache: true
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-android-deps-${{ hashFiles('**/pubspec.yaml', '**/build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-android-deps-
            
      - run: flutter pub get

      - name: Decode keystore
        run: |
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > keystore.jks

      # Build Android Mobile
      - name: Build Android APK Mobile
        run: flutter build apk --dart-define=isTV=false --release
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_ALIAS_PASSWORD: ${{ secrets.KEY_ALIAS_PASSWORD }}
          
      - name: Rename Android APK
        run: mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/easyTV-${{ github.ref_name }}.apk

      # Build Android TV
      - name: Build Android APK TV
        run: flutter build apk --dart-define=isTV=true --release
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_ALIAS_PASSWORD: ${{ secrets.KEY_ALIAS_PASSWORD }}

      - name: Rename Android TV APK
        run: mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/easyTV-${{ github.ref_name }}-tv.apk

      - name: Upload android_and_tv artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-and-tv-artifact
          path: |
            build/app/outputs/flutter-apk/easyTV-${{ github.ref_name }}.apk
            build/app/outputs/flutter-apk/easyTV-${{ github.ref_name }}-tv.apk

  build_ios_macos:
    if: (github.event.inputs.build_ios == 'true' || github.event.inputs.build_macos != 'false' || github.event.inputs.build_macos == '' || github.event_name != 'workflow_dispatch')
    runs-on: macos-latest
    timeout-minutes: 60
    strategy:
      matrix:
        include:
          - arch: intel
            target: x86_64
          - arch: apple
            target: arm64
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.8'
          cache: true
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ~/Library/Caches/CocoaPods
          key: ${{ runner.os }}-${{ matrix.arch }}-deps-${{ hashFiles('**/pubspec.yaml', '**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-deps-
            
      - run: flutter pub get

      - name: Select Xcode version
        run: |
          # 查找可用的Xcode版本并选择最新的
          XCODE_PATH=$(find /Applications -name "Xcode*.app" -maxdepth 1 | sort -V | tail -1)
          if [ -n "$XCODE_PATH" ]; then
            echo "Found Xcode at: $XCODE_PATH"
            sudo xcode-select -s "$XCODE_PATH/Contents/Developer"
          else
            echo "Using default Xcode"
            sudo xcode-select --print-path
          fi

      # Build iOS (only if requested and intel arch)
      - name: Build iOS
        if: github.event.inputs.build_ios == 'true' && matrix.arch == 'intel'
        run: |
          flutter build ios --dart-define=isTV=false --release --no-codesign
          cd build/ios/iphoneos
          mkdir Payload
          mv Runner.app Payload/
          zip -r easyTV-${{ github.ref_name }}.ipa Payload

      # Build macOS with specific architecture
      - name: Build macOS ${{ matrix.arch }}
        if: github.event.inputs.build_macos != 'false' || github.event.inputs.build_macos == '' || github.event_name != 'workflow_dispatch'
        run: |
          # 设置架构环境变量
          export FLUTTER_BUILD_MODE=release
          if [ "${{ matrix.arch }}" = "intel" ]; then
            export ARCHS="x86_64"
          else
            export ARCHS="arm64"
          fi
          
          flutter build macos --dart-define=isTV=false --release
          cd build/macos/Build/Products/Release
          zip -r easyTV-${{ github.ref_name }}-macos-${{ matrix.arch }}.zip *.app

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}-artifact
          path: |
            build/ios/iphoneos/easyTV-${{ github.ref_name }}.ipa
            build/macos/Build/Products/Release/easyTV-${{ github.ref_name }}-macos-${{ matrix.arch }}.zip

  build_linux_x64:
    if: github.event.inputs.build_linux != 'false' || github.event.inputs.build_linux == '' || github.event_name != 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.8'
          cache: true
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
          key: ${{ runner.os }}-x64-deps-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-x64-deps-
            
      - run: |
          sudo apt-get update -y
          sudo apt-get install -y cmake ninja-build libgtk-3-dev libasound2-dev
          sudo apt-get install -y pkg-config libblkid-dev liblzma-dev
          
      - run: flutter config --enable-linux-desktop
      - run: flutter pub get
      
      - name: Build Linux x64
        run: |
          flutter build linux --dart-define=isTV=false --release

      - name: Create Linux packages
        run: |
          # 准备打包目录
          mkdir -p packages
          cd build/linux/x64/release/bundle
          
          # 创建传统tar.gz包
          tar -czf ../../../../../packages/easyTV-${{ github.ref_name }}-linux-x64.tar.gz .
          
          # 准备deb包目录结构
          cd ../../../../../
          mkdir -p deb-package/DEBIAN
          mkdir -p deb-package/usr/bin
          mkdir -p deb-package/usr/share/applications
          mkdir -p deb-package/usr/share/icons/hicolor/256x256/apps
          mkdir -p deb-package/usr/share/doc/easytv-live
          
          # 复制应用文件
          cp -r build/linux/x64/release/bundle/* deb-package/usr/bin/
          
          # 创建desktop文件
          cat > deb-package/usr/share/applications/easytv-live.desktop << EOF
          [Desktop Entry]
          Version=1.0.0
          Type=Application
          Name=Easy TV Live
          Comment=Easy TV Live Application
          Exec=/usr/bin/easy_tv_live
          Icon=easytv-live
          Terminal=false
          Categories=AudioVideo;Video;Player;
          StartupNotify=true
          EOF
          
          # 创建DEBIAN控制文件
          cat > deb-package/DEBIAN/control << EOF
          Package: easytv-live
          Version: 1.0.0-test
          Section: video
          Priority: optional
          Architecture: amd64
          Depends: libgtk-3-0, libasound2
          Maintainer: Easy TV Live Team
          Description: Easy TV Live Application
           A modern TV live streaming application built with Flutter.
          EOF
          
          # 创建postinst脚本
          cat > deb-package/DEBIAN/postinst << EOF
          #!/bin/bash
          chmod +x /usr/bin/easy_tv_live
          update-desktop-database
          EOF
          chmod 755 deb-package/DEBIAN/postinst
          
          # 构建deb包
          dpkg-deb --build deb-package packages/easyTV-${{ github.ref_name }}-linux-amd64.deb
          
          # 准备rpm包目录结构
          mkdir -p rpm-package/SPECS
          mkdir -p rpm-package/BUILD
          mkdir -p rpm-package/RPMS
          mkdir -p rpm-package/SOURCES
          mkdir -p rpm-package/BUILDROOT/easytv-live-1.0.0-1.x86_64/usr/bin
          mkdir -p rpm-package/BUILDROOT/easytv-live-1.0.0-1.x86_64/usr/share/applications
          
          # 复制文件到rpm构建目录
          cp -r build/linux/x64/release/bundle/* rpm-package/BUILDROOT/easytv-live-1.0.0-1.x86_64/usr/bin/
          cp deb-package/usr/share/applications/easytv-live.desktop rpm-package/BUILDROOT/easytv-live-1.0.0-1.x86_64/usr/share/applications/
          
          # 创建rpm spec文件
          cat > rpm-package/SPECS/easytv-live.spec << EOF
          Name: easytv-live
          Version: 1.0.0
          Release: 1
          Summary: Easy TV Live Application
          License: MIT
          Group: Applications/Multimedia
          BuildArch: x86_64
          Requires: gtk3, alsa-lib
          
          %description
          A modern TV live streaming application built with Flutter.
          
          %files
          /usr/bin/*
          /usr/share/applications/easytv-live.desktop
          
          %post
          chmod +x /usr/bin/easy_tv_live
          update-desktop-database
          
          %changelog
          * $(date +'%a %b %d %Y') Easy TV Live Team - ${{ github.ref_name }}-1
          - Release ${{ github.ref_name }}
          EOF
          
          # 安装rpm-build工具
          sudo apt-get update
          sudo apt-get install -y rpm
          
          # 构建rpm包
          rpmbuild --define "_topdir $(pwd)/rpm-package" -bb rpm-package/SPECS/easytv-live.spec
          cp rpm-package/RPMS/x86_64/*.rpm packages/easyTV-${{ github.ref_name }}-linux-x86_64.rpm
          
          # 创建AppImage
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          
          # 复制应用文件
          cp -r build/linux/x64/release/bundle/* AppDir/usr/bin/
          cp deb-package/usr/share/applications/easytv-live.desktop AppDir/usr/share/applications/
          # AppImage需要在根目录有desktop文件
          cp deb-package/usr/share/applications/easytv-live.desktop AppDir/
          
          # 创建AppRun脚本
          cat > AppDir/AppRun << 'EOF'
          #!/bin/bash
          HERE="$(dirname "$(readlink -f "${0}")")"
          export LD_LIBRARY_PATH="${HERE}/usr/bin/lib:${LD_LIBRARY_PATH}"
          exec "${HERE}/usr/bin/easy_tv_live" "$@"
          EOF
          chmod +x AppDir/AppRun
          
          # 安装FUSE并下载appimagetool
          sudo apt-get install -y fuse libfuse2
          wget -O appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool
          
          # 尝试使用FUSE运行，如果失败则使用提取模式
          ./appimagetool AppDir packages/easyTV-${{ github.ref_name }}-linux-x86_64.AppImage || \
          ./appimagetool --appimage-extract-and-run AppDir packages/easyTV-${{ github.ref_name }}-linux-x86_64.AppImage

      - name: Upload linux-x64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64-artifact
          path: |
            packages/easyTV-${{ github.ref_name }}-linux-x64.tar.gz
            packages/easyTV-${{ github.ref_name }}-linux-amd64.deb
            packages/easyTV-${{ github.ref_name }}-linux-x86_64.rpm
            packages/easyTV-${{ github.ref_name }}-linux-x86_64.AppImage

  build_windows:
    if: github.event.inputs.build_windows != 'false' || github.event.inputs.build_windows == '' || github.event_name != 'workflow_dispatch'
    runs-on: windows-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.8'
          cache: true
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~\AppData\Local\Pub\Cache
          key: ${{ runner.os }}-deps-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-deps-
            
      - run: flutter config --enable-windows-desktop
      - run: flutter pub get
      
      - name: Build Windows
        run: |
          flutter build windows --dart-define=isTV=false --release
          cp windows/system32/* build/windows/x64/runner/Release/

      - name: Create portable executable
        run: |
          # 创建便携版目录
          mkdir portable
          
          # 复制主程序和所有依赖
          cp -r build/windows/x64/runner/Release/* portable/
          cd portable
          
          # 重命名主程序为更友好的名称
          mv easy_tv_live.exe "easyTV-${{ github.ref_name }}.exe"
          
          # 尝试使用 UPX 压缩exe (如果可用)
          curl -L -o upx.zip "https://github.com/upx/upx/releases/download/v4.2.1/upx-4.2.1-win64.zip"
          7z x upx.zip
          ./upx-4.2.1-win64/upx.exe --best "easyTV-${{ github.ref_name }}.exe" || echo "UPX compression failed, continuing..."
          
          # 创建单文件便携版 - 使用 WinRAR SFX 或 7z SFX
          # 下载便携版SFX模块
          curl -L -o WinRAR.sfx "https://github.com/electron-userland/electron-builder/raw/master/packages/app-builder-lib/templates/nsis/Uninstaller.nsh" || curl -L -o 7zS.sfx "https://www.7-zip.org/a/7zS.sfx"
          
          # 创建配置文件让SFX静默解压到临时目录并自动运行
          echo ';!@Install@!UTF-8!' > config.txt
          echo 'Title="Easy TV Live"' >> config.txt
          echo 'ExtractTitle="Starting Easy TV Live..."' >> config.txt
          echo 'ExtractDialogText="Loading application..."' >> config.txt
          echo 'AutoInstall="1"' >> config.txt
          echo 'Silent="1"' >> config.txt
          echo 'Overwrite="1"' >> config.txt
          echo 'ExtractPathText=""' >> config.txt
          echo 'ExtractPath="%%T\\EasyTVLive"' >> config.txt
          echo 'RunProgram="%%T\\EasyTVLive\\easyTV-${{ github.ref_name }}.exe"' >> config.txt
          echo 'Delete="%%T\\EasyTVLive"' >> config.txt
          echo ';!@InstallEnd@!' >> config.txt
          
          # 创建压缩包
          7z a -t7z app.7z * -mx=9 -mmt=on
          
          # 创建真正的单文件便携exe (解压到临时目录并自动运行)
          if (Test-Path "7zS.sfx") {
            cmd /c copy /b 7zS.sfx + config.txt + app.7z "easyTV-${{ github.ref_name }}-windows.exe"
          } else {
            echo "SFX creation failed, creating regular zip instead"
            7z a "easyTV-${{ github.ref_name }}-windows-portable.zip" *
          }
          
          # 创建传统zip包
          7z a "easyTV-${{ github.ref_name }}-windows.zip" "easyTV-${{ github.ref_name }}.exe" *.dll data/

      - name: Upload windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifact
          path: |
            portable/easyTV-${{ github.ref_name }}-windows.exe
            portable/easyTV-${{ github.ref_name }}-windows.zip

  create_release:
    needs: [ build_linux_x64, build_windows, build_android_and_tv, build_ios_macos ]
    if: always() && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download artifact artifact
        uses: actions/download-artifact@v4
        with:
          path: release
          merge-multiple: true
          
      - name: display Release dir
        run: |
          realpath release  
          ls -l release
          pwd

      - name: Upload artifacts to Release
        uses: softprops/action-gh-release@v2
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          draft: true
          prerelease: false
          files: |
            ./release/easyTV-${{ github.ref_name }}.apk
            ./release/easyTV-${{ github.ref_name }}-tv.apk
            ./release/easyTV-${{ github.ref_name }}.ipa
            ./release/easyTV-${{ github.ref_name }}-macos-intel.zip
            ./release/easyTV-${{ github.ref_name }}-macos-apple.zip
            ./release/easyTV-${{ github.ref_name }}-linux-x64.tar.gz
            ./release/easyTV-${{ github.ref_name }}-linux-amd64.deb
            ./release/easyTV-${{ github.ref_name }}-linux-x86_64.rpm
            ./release/easyTV-${{ github.ref_name }}-linux-x86_64.AppImage
            ./release/easyTV-${{ github.ref_name }}-windows.exe
            ./release/easyTV-${{ github.ref_name }}-windows.zip
